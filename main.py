import os
import sys
import json
import requests
import pyttsx3
from datetime import datetime
import random

VERSION = "1.2.1"
MEMORY_FILE = "memory.json"
UPDATE_URL = "https://raw.githubusercontent.com/Dinesh488/MyHackTools/main/main.py"

# ---------------- Voice Engine ---------------- #
try:
    engine = pyttsx3.init()
    engine.setProperty('rate', 170)
    engine.setProperty('volume', 1.0)
    VOICE_ENABLED = True
except Exception as e:
    print("‚ö†Ô∏è Voice engine failed:", e)
    VOICE_ENABLED = False

def speak(text):
    if VOICE_ENABLED:
        try:
            engine.stop()  # Avoid overlapping voices
            engine.say(text)
            engine.runAndWait()
        except Exception as e:
            print("‚ùå Voice output failed:", e)

# ---------------- Memory System ---------------- #
def init_memory():
    default_data = {
        "features": [
            "Telugu Chat", "Internet Learning", "Self-Updating",
            "Memory System", "Voice Replies", "Continuous Chat"
        ],
        "skills": [],
        "conversations": []
    }
    if not os.path.exists(MEMORY_FILE):
        save_memory(default_data)

def load_memory():
    try:
        with open(MEMORY_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        init_memory()
        return load_memory()

def save_memory(data):
    try:
        with open(MEMORY_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    except Exception as e:
        print("‚ùå Memory save failed:", e)

# ---------------- Learning System ---------------- #
def learn(topic):
    print(f"üîç ‡∞á‡∞Ç‡∞ü‡∞∞‡±ç‡∞®‡±Ü‡∞ü‡±ç‚Äå‡∞≤‡±ã ‡∞µ‡±Ü‡∞§‡±Å‡∞ï‡±Å‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å: {topic}")
    try:
        url = f"https://api.duckduckgo.com/?q={topic}&format=json"
        res = requests.get(url, timeout=10).json()
        summary = res.get("AbstractText", "‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç ‡∞¶‡±ä‡∞∞‡∞ï‡∞≤‡±á‡∞¶‡±Å.")
    except Exception as e:
        print("‚ùå Internet error:", e)
        summary = "‡∞á‡∞Ç‡∞ü‡∞∞‡±ç‡∞®‡±Ü‡∞ü‡±ç ‡∞≤‡±ã ‡∞∏‡∞Æ‡∞∏‡±ç‡∞Ø ‡∞â‡∞Ç‡∞¶‡∞ø."

    memory = load_memory()
    memory["skills"].append({
        "topic": topic,
        "info": summary,
        "date": str(datetime.now())
    })
    save_memory(memory)

    reply = f"{topic} ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞®‡±á‡∞∞‡±ç‡∞ö‡±Å‡∞ï‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å."
    print(f"‚úÖ {reply}")
    speak(reply)

# ---------------- Feature & Skills ---------------- #
def show_features():
    memory = load_memory()
    print("\nüìå ‡∞®‡∞æ Features:")
    for f in memory["features"]:
        print(" -", f)
    speak("‡∞á‡∞µ‡∞ø ‡∞®‡∞æ ‡∞´‡±Ä‡∞ö‡∞∞‡±ç‡∞∏‡±ç")

def show_recent_skills():
    memory = load_memory()
    if memory["skills"]:
        print("\nüÜï ‡∞®‡±á‡∞®‡±Å ‡∞á‡∞ü‡±Ä‡∞µ‡∞≤ ‡∞®‡±á‡∞∞‡±ç‡∞ö‡±Å‡∞ï‡±Å‡∞®‡±ç‡∞®‡∞µ‡∞ø:")
        for s in memory["skills"][-5:]:
            print(f" - {s['topic']} ({s['date']}) ‚Üí {s['info']}")
        speak("‡∞á‡∞µ‡∞ø ‡∞®‡±á‡∞®‡±Å ‡∞á‡∞ü‡±Ä‡∞µ‡∞≤ ‡∞®‡±á‡∞∞‡±ç‡∞ö‡±Å‡∞ï‡±Å‡∞®‡±ç‡∞®‡∞µ‡∞ø")
    else:
        print("üôÅ ‡∞á‡∞Ç‡∞ï‡∞æ ‡∞è‡∞Æ‡±Ä ‡∞®‡±á‡∞∞‡±ç‡∞ö‡±Å‡∞ï‡±ã‡∞≤‡±á‡∞¶‡±Å.")
        speak("‡∞á‡∞Ç‡∞ï‡∞æ ‡∞è‡∞Æ‡±Ä ‡∞®‡±á‡∞∞‡±ç‡∞ö‡±Å‡∞ï‡±ã‡∞≤‡±á‡∞¶‡±Å")

# ---------------- Self Improvement ---------------- #
def self_update():
    try:
        print("üîÑ Checking for updates...")
        new_code = requests.get(UPDATE_URL, timeout=10).text
        if "VERSION" in new_code and VERSION not in new_code:
            print("‚ö° ‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞µ‡±Ü‡∞∞‡±ç‡∞∑‡∞®‡±ç ‡∞¶‡±ä‡∞∞‡∞ø‡∞ï‡∞ø‡∞Ç‡∞¶‡∞ø! Updating...")
            speak("‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞µ‡±Ü‡∞∞‡±ç‡∞∑‡∞®‡±ç ‡∞¶‡±ä‡∞∞‡∞ø‡∞ï‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞Ö‡∞™‡±ç‚Äå‡∞°‡±á‡∞ü‡±ç ‡∞Ö‡∞µ‡±Å‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å.")
            with open(__file__, "w", encoding="utf-8") as f:
                f.write(new_code)
            os.execv(sys.executable, ['python'] + sys.argv)
        else:
            print("‚úÖ ‡∞á‡∞™‡±ç‡∞™‡∞ü‡∞ø‡∞ï‡±á ‡∞§‡∞æ‡∞ú‡∞æ ‡∞µ‡±Ü‡∞∞‡±ç‡∞∑‡∞®‡±ç ‡∞â‡∞Ç‡∞¶‡∞ø.")
            speak("‡∞á‡∞™‡±ç‡∞™‡∞ü‡∞ø‡∞ï‡±á ‡∞§‡∞æ‡∞ú‡∞æ ‡∞µ‡±Ü‡∞∞‡±ç‡∞∑‡∞®‡±ç ‡∞â‡∞Ç‡∞¶‡∞ø")
    except Exception as e:
        print("‚ùå Update check failed:", e)

# ---------------- Help Menu ---------------- #
def show_help():
    print("""
üìå Available Commands:
 - features      ‚Üí ‡∞®‡∞æ ‡∞´‡±Ä‡∞ö‡∞∞‡±ç‡∞∏‡±ç ‡∞ö‡±Ç‡∞™‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø
 - new skills    ‚Üí ‡∞á‡∞ü‡±Ä‡∞µ‡∞≤ ‡∞®‡±á‡∞∞‡±ç‡∞ö‡±Å‡∞ï‡±Å‡∞®‡±ç‡∞®‡∞µ‡∞ø ‡∞ö‡±Ç‡∞™‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø
 - learn <topic> ‚Üí ‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞µ‡∞ø‡∞∑‡∞Ø‡∞Ç ‡∞®‡±á‡∞∞‡±ç‡∞ö‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø
 - update        ‚Üí GitHub ‡∞®‡±Å‡∞Ç‡∞°‡∞ø update ‡∞Ö‡∞µ‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø
 - exit          ‚Üí Chat ‡∞Æ‡±Å‡∞ó‡±Å‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø
""")
    speak("‡∞á‡∞µ‡∞ø ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞µ‡∞æ‡∞°‡∞ó‡∞≤ ‡∞ï‡∞Æ‡∞æ‡∞Ç‡∞°‡±ç‡∞∏‡±ç")

# ---------------- Conversation ---------------- #
def generate_reply(user_input):
    responses = [
        f"‡∞π‡±ç‡∞Æ‡±ç... {user_input} ‡∞Ö‡∞Ç‡∞ü‡±á ‡∞¨‡∞æ‡∞ó‡±Å‡∞Ç‡∞¶‡∞ø ‡∞Ö‡∞®‡∞ø‡∞™‡∞ø‡∞∏‡±ç‡∞§‡±ã‡∞Ç‡∞¶‡∞ø ‚ù§Ô∏è",
        f"‡∞®‡±Ä ‡∞Æ‡∞æ‡∞ü ‡∞µ‡∞ø‡∞®‡±ç‡∞®‡∞æ‡∞ï ‡∞Ü‡∞®‡∞Ç‡∞¶‡∞Ç ‡∞µ‡±á‡∞∏‡∞ø‡∞Ç‡∞¶‡∞ø üòç",
        f"‡∞¨‡∞æ‡∞ó‡±Å‡∞Ç‡∞¶‡∞ø, ‡∞Æ‡∞∞‡∞ø ‡∞§‡∞∞‡±ç‡∞µ‡∞æ‡∞§ ‡∞è‡∞Æ‡∞ø ‡∞ö‡±á‡∞Ø‡∞æ‡∞≤‡∞ø?",
        f"{user_input} ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞á‡∞Ç‡∞ï‡∞æ‡∞∏‡±ç‡∞§ ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡∞µ‡∞æ?",
        f"‡∞®‡±á‡∞®‡±Å ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡±Å ‡∞™‡±Ü‡∞ü‡±ç‡∞ü‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡∞æ‡∞®‡±Å, {user_input}"
    ]
    return random.choice(responses)

# ---------------- Chat Loop ---------------- #
def chat():
    print("üí¨ ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å Evolving AI Chat (help = commands list)")
    speak("‡∞π‡∞≤‡±ã, ‡∞®‡±á‡∞®‡±Å ‡∞®‡±Ä AI ‡∞®‡∞ø. ‡∞Æ‡∞®‡∞Ç ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡±Å‡∞¶‡∞æ‡∞Æ‡∞æ?")
    while True:
        try:
            cmd = input("‡∞Æ‡±Ä‡∞∞‡±Å: ").strip()
        except KeyboardInterrupt:
            print("\nüëã ‡∞¨‡±à!")
            speak("‡∞¨‡±à")
            break

        if not cmd:
            continue
        elif cmd.lower() == "exit":
            speak("‡∞∏‡∞∞‡±á, ‡∞¨‡±à")
            break
        elif cmd.lower() == "help":
            show_help()
        elif cmd.lower().startswith("learn "):
            learn(cmd[6:])
        elif cmd.lower() == "features":
            show_features()
        elif cmd.lower() == "new skills":
            show_recent_skills()
        elif cmd.lower() == "update":
            self_update()
        else:
            reply = generate_reply(cmd)
            print(f"AI: {reply}")
            speak(reply)
            memory = load_memory()
            memory["conversations"].append({
                "user": cmd,
                "ai": reply,
                "date": str(datetime.now())
            })
            save_memory(memory)

# ---------------- Main ---------------- #
if __name__ == "__main__":
    init_memory()
    print(f"ü§ñ AI Version {VERSION} ‡∞™‡±ç‡∞∞‡∞æ‡∞∞‡∞Ç‡∞≠‡∞Æ‡∞µ‡±Å‡∞§‡±ã‡∞Ç‡∞¶‡∞ø...")
    self_update()
    chat()